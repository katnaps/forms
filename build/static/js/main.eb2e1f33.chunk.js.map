{"version":3,"sources":["contexts/StateContext.js","components/DropRow.js","contexts/ModalContext.js","components/Forms.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["createContext","useContext","StateContext","ruleList","handleAddRuleSet","handleRemoveRuleSet","idx","useState","para","rowList","setRowList","isSelectOpt1","isSelectOpt2","selectOpt1","map","selectOpt2","handleAddRule","className","type1","key","value","name","type2","y","idx2","type","placeholder","onChange","e","index","target","list","handleInputPara","length","onClick","splice","handleRemoveRule","id","children","closeModalState","ModalContext","condition","setRuleList","conditions","ruleSubSet","push","DropRow","opt","x","Provider","child","modalState","setModalState","document","body","style","backgroundColor","window","location","reload","Forms","App","Modal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb2e1f33.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport default createContext();","import React, { useState, useContext } from 'react';\nimport StateContext from '../contexts/StateContext';\n\n\nexport default () => {\n    const{ ruleList, handleAddRuleSet, handleRemoveRuleSet, idx } = useContext(StateContext);\n\n    const [rowList, setRowList] = useState([{ para: \"\" }]);\n    const [isSelectOpt1, setSelectOpt1] = useState(['aff_sub', 'aff_sub1', 'aff_sub2']);\n    const [isSelectOpt2, setSelectOpt2] = useState(['is', 'less', 'more']);\n\n    const selectOpt1 = isSelectOpt1.map(selectOpt1 => selectOpt1);\n    const selectOpt2 = isSelectOpt2.map(selectOpt2 => selectOpt2);\n\n\n    // handle parameter input row changes\n    const handleInputPara = (e, index) => {\n        const { name, value } = e.target;\n        const list = [...rowList];\n        list[index][name] = value;\n        setRowList(list);\n    };\n\n    // hancle click event of remove rule\n    const handleRemoveRule = index => {\n        const list = [...rowList];\n        list.splice(index, 1);\n        setRowList(list);\n    };\n\n    // handle click event of add rule\n    const handleAddRule = () => {\n        setRowList([...rowList, { para: \"\" }]);\n    };\n\n\n    return (\n        <div className=\"row\">\n\n            <h4 className=\"rule-title\">Rule {idx + 1}</h4>\n\n            <div className=\"row-content\">\n                <div className=\"drop-grp\">\n                    <select className=\"drop-grp-menu\">\n                        {\n                            selectOpt1.map((type1, key) => <option key={key} value={key}>{type1}</option>)\n                        }\n                    </select>\n                    <select name=\"subOpt2\" className=\"drop-grp-menu\">\n                        {\n                            selectOpt2.map((type2, key) => <option key={key} value={key}>{type2}</option>)\n                        }\n                    </select>\n                </div>\n\n                <div className=\"para-grp\">\n                    {rowList.map((y, idx2) => {\n                        return (\n                            <div key={idx2} className=\"para-subgrp\">\n                                <input\n                                    name=\"para\"\n                                    className=\"input-para\"\n                                    type=\"text\"\n                                    value={y.para}\n                                    placeholder=\" insert parameter\"\n                                    onChange={e => handleInputPara(e, idx2)}\n                                />\n                                {rowList.length !== 1 && rowList.length - 1 !== idx2 &&\n                                    <button\n                                        className=\"rm-rule btn-rule\"\n                                        onClick={() => handleRemoveRule(idx2)}\n                                    >\n                                        remove rule\n                                    </button>\n                                }\n                                {\n                                    rowList.length - 1 === idx2 &&\n                                    <button\n                                        className=\"add-rule btn-rule\"\n                                        onClick={handleAddRule}\n                                    >\n                                        add rule\n                                    </button>\n                                }\n                            </div>\n                        );\n                    })}\n\n                    {\n                        ruleList.length !== 1 &&\n                        <button\n                            className=\"rm-row\"\n                            id=\"btn-add\"\n                            onClick={() => handleRemoveRuleSet(idx)}>\n                            -\n                                </button>\n                    }\n                    {\n                        ruleList.length - 1 === idx &&\n                        <button\n                            className=\"add-row\"\n                            id=\"btn-add\"\n                            onClick={handleAddRuleSet}>\n                            +\n                                </button>\n                    }\n\n                </div>\n\n            </div>\n\n        </div>\n\n    )\n}","import { createContext } from 'react'\n\nexport default createContext();","import React, { useState, useContext } from 'react';\nimport DropRow from './DropRow';\nimport StateContext from '../contexts/StateContext';\nimport ModalContext from '../contexts/ModalContext';\n\nexport default ({ children }) => {\n    const { closeModalState } = useContext(ModalContext);\n\n    const [condition, setCondtions] = useState(['ALL', 'option1', 'option2', 'option3']);\n    const [ruleList, setRuleList] = useState([{}]);\n\n    const conditions = condition.map(conditions => conditions);\n\n\n\n    // handle click event to remove Rule set\n    const handleRemoveRuleSet = index => {\n        const list = [...ruleList];\n        list.splice(index, 1);\n        setRuleList(list);\n    }\n\n    // handle click event to add Rule set\n    const handleAddRuleSet = () => {\n        const ruleSubSet = [...ruleList];\n        ruleSubSet.push(<DropRow />)\n        setRuleList(ruleSubSet);\n    }\n\n\n    return (\n        <div className=\"modal-subcontent\">\n            <div className=\"title-row\">\n                <h4>Add Revenue Group</h4>\n                <p>Revenue Group Title</p>\n                <input type='text' className='text-input' />\n            </div>\n            <div className=\"top-row\">\n                <div className=\"upper-row\">\n                    <label>If</label>\n                    <select className=\"drop-menu\">\n                        {conditions.map((opt, key) => <option key={key} value={key}>{opt}</option>)}\n                    </select>\n                    <label>of the below conditions are met</label>\n                </div>\n\n                {ruleList.map((x, idx) => {\n                    return (\n                        <StateContext.Provider value={{ ruleList, handleAddRuleSet, handleRemoveRuleSet, idx, setRuleList }}>\n                            <div key={idx}>\n                                <DropRow />\n                            </div>\n                            {children}\n                        </StateContext.Provider>\n                    )\n                })}\n                <div className=\"rev-row\">\n                    <label>the revenue is</label>\n                    <input type=\"number\" />\n                    <span>%</span>\n                </div>\n\n                <div className=\"action-btn\">\n                    <button id=\"confirm\">Confirm</button>\n                    <button id=\"cancel\" onClick={closeModalState}>Cancel</button>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\n// ruleList={ruleList} handleAddRuleSet={handleAddRuleSet} handleRemoveRuleSet={handleRemoveRuleSet} idx={idx}","import React, { useState, useContext } from 'react';\nimport Forms from './Forms';\nimport ModalContext from \"../contexts/ModalContext\";\n\nexport default ({ child }) => {\n\n    const [modalState, setModalState] = useState(false);\n\n    // handles click event to open up modal form\n    const handleModalState = () => {\n        document.body.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n\n        setModalState(true);\n    }\n    // handle click event to close the modal form\n    const closeModalState = () => {\n        document.body.style.backgroundColor = '#fff';\n        setModalState(false);\n        window.location.reload(false);\n    }\n\n\n    return (\n        <ModalContext.Provider value={{ closeModalState }}>\n            <div className=\"btn-container\">\n                <div className=\"main-btn\">\n                    <button className=\"modal-btn\" onClick={handleModalState}>Open Form</button>\n                </div>\n            </div>\n            <div className={modalState ? \"modal-container-open\" : \"modal-container-close\"}>\n                <div className=\"modal-content\">\n                    <Forms />\n                </div>\n            </div>\n\n\n            {child}\n        </ModalContext.Provider>\n    )\n}\n","import React from 'react';\nimport Modal from './components/Modal';\nimport './App.css';\n\nfunction App() {\n  return (  \n      <Modal />\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}